directive @enum(subgraph: String, value: String) on ENUM_VALUE

directive @resolveRoot(subgraph: String) on FIELD_DEFINITION

directive @typescript(subgraph: String, type: String) on SCALAR | ENUM

directive @example(subgraph: String, value: ObjMap) repeatable on FIELD_DEFINITION | OBJECT | INPUT_OBJECT | ENUM | SCALAR

directive @regexp(subgraph: String, pattern: String) on SCALAR

directive @httpOperation(subgraph: String, path: String, operationSpecificHeaders: [[String]], httpMethod: HTTPMethod, isBinary: Boolean, requestBaseBody: ObjMap, queryParamArgMap: ObjMap, queryStringOptionsByParam: ObjMap, jsonApiFields: Boolean, queryStringOptions: ObjMap) on FIELD_DEFINITION

directive @transport(subgraph: String, kind: String, location: String, headers: [[String]], queryStringOptions: ObjMap, queryParams: [[String]]) repeatable on SCHEMA

type Query {
  """Get total assets"""
  totalAssets(days: queryInput_totalAssets_days = _7d): [query_totalAssets_items]

  """Get historical market data for a specific token"""
  historicalTokenData: historicalTokenData_200_response

  """Compare total supply between periods"""
  compareTotalSupply(days: queryInput_compareTotalSupply_days = _90d): compareTotalSupply_200_response

  """Compare delegated supply between periods"""
  compareDelegatedSupply(days: queryInput_compareDelegatedSupply_days = _90d): compareDelegatedSupply_200_response

  """Compare circulating supply between periods"""
  compareCirculatingSupply(days: queryInput_compareCirculatingSupply_days = _90d): compareCirculatingSupply_200_response

  """Compare treasury between periods"""
  compareTreasury(days: queryInput_compareTreasury_days = _90d): compareTreasury_200_response

  """Compare cex supply between periods"""
  compareCexSupply(days: queryInput_compareCexSupply_days = _90d): compareCexSupply_200_response

  """Compare dex supply between periods"""
  compareDexSupply(days: queryInput_compareDexSupply_days = _90d): compareDexSupply_200_response

  """Compare lending supply between periods"""
  compareLendingSupply(days: queryInput_compareLendingSupply_days = _90d): compareLendingSupply_200_response

  """Get active token supply for DAO"""
  compareActiveSupply(days: queryInput_compareActiveSupply_days = _90d): compareActiveSupply_200_response

  """Compare number of proposals between time periods"""
  compareProposals(days: queryInput_compareProposals_days = _90d): compareProposals_200_response

  """Compare number of votes between time periods"""
  compareVotes(days: queryInput_compareVotes_days = _90d): compareVotes_200_response

  """Compare average turnout between time periods"""
  compareAverageTurnout(days: queryInput_compareAverageTurnout_days = _90d): compareAverageTurnout_200_response

  """
  Returns proposal activity data including voting history, win rates, and detailed proposal information for the specified delegate within the given time window
  """
  proposalsActivity(address: String!, fromDate: NonNegativeInt, skip: NonNegativeInt, limit: PositiveInt = 10, orderBy: queryInput_proposalsActivity_orderBy = timestamp, orderDirection: queryInput_proposalsActivity_orderDirection = desc, userVoteFilter: queryInput_proposalsActivity_userVoteFilter): proposalsActivity_200_response

  """Returns a list of proposal"""
  proposals(skip: NonNegativeInt, limit: PositiveInt = 10, orderDirection: queryInput_proposals_orderDirection = desc, status: JSON, fromDate: Float): [query_proposals_items]

  """Returns a single proposal by its ID"""
  proposal(id: String!): proposal_200_response

  """
  Fetch historical token balances for multiple addresses at a specific time period using multicall
  """
  historicalBalances(addresses: JSON!, days: queryInput_historicalBalances_days = _7d): [query_historicalBalances_items]

  """
  Fetch historical voting power for multiple addresses at a specific time period using multicall
  """
  historicalVotingPower(addresses: JSON!, days: queryInput_historicalVotingPower_days = _7d): [query_historicalVotingPower_items]

  """
  Get transactions with their associated transfers and delegations, with optional filtering and sorting
  """
  transactions(
    limit: PositiveInt = 50
    offset: NonNegativeInt
    sortBy: timestamp_const
    sortOrder: queryInput_transactions_sortOrder = desc
    from: String
    to: String
    minAmount: queryInput_transactions_minAmount
    maxAmount: queryInput_transactions_maxAmount

    """
    Filter transactions by affected supply type. Can be: 'CEX', 'DEX', 'LENDING', or 'TOTAL'
    """
    affectedSupply: JSON
  ): transactions_200_response

  """Get the last update time"""
  lastUpdate(chart: queryInput_lastUpdate_chart!): lastUpdate_200_response
}

type query_totalAssets_items {
  totalAssets: String!
  date: String!
}

enum queryInput_totalAssets_days {
  _7d
  _30d
  _90d
  _180d
  _365d
}

type historicalTokenData_200_response {
  prices: [[Float]]!
  market_caps: [[Float]]!
  total_volumes: [[Float]]!
}

type compareTotalSupply_200_response {
  oldTotalSupply: String!
  currentTotalSupply: String!
  changeRate: Float!
}

enum queryInput_compareTotalSupply_days {
  _7d
  _30d
  _90d
  _180d
  _365d
}

type compareDelegatedSupply_200_response {
  oldDelegatedSupply: String!
  currentDelegatedSupply: String!
  changeRate: Float!
}

enum queryInput_compareDelegatedSupply_days {
  _7d
  _30d
  _90d
  _180d
  _365d
}

type compareCirculatingSupply_200_response {
  oldCirculatingSupply: String!
  currentCirculatingSupply: String!
  changeRate: Float!
}

enum queryInput_compareCirculatingSupply_days {
  _7d
  _30d
  _90d
  _180d
  _365d
}

type compareTreasury_200_response {
  oldTreasury: String!
  currentTreasury: String!
  changeRate: Float!
}

enum queryInput_compareTreasury_days {
  _7d
  _30d
  _90d
  _180d
  _365d
}

type compareCexSupply_200_response {
  oldCexSupply: String!
  currentCexSupply: String!
  changeRate: Float!
}

enum queryInput_compareCexSupply_days {
  _7d
  _30d
  _90d
  _180d
  _365d
}

type compareDexSupply_200_response {
  oldDexSupply: String!
  currentDexSupply: String!
  changeRate: Float!
}

enum queryInput_compareDexSupply_days {
  _7d
  _30d
  _90d
  _180d
  _365d
}

type compareLendingSupply_200_response {
  oldLendingSupply: String!
  currentLendingSupply: String!
  changeRate: Float!
}

enum queryInput_compareLendingSupply_days {
  _7d
  _30d
  _90d
  _180d
  _365d
}

type compareActiveSupply_200_response {
  activeSupply: String!
}

enum queryInput_compareActiveSupply_days {
  _7d
  _30d
  _90d
  _180d
  _365d
}

type compareProposals_200_response {
  currentProposalsLaunched: Float!
  oldProposalsLaunched: Float!
  changeRate: Float!
}

enum queryInput_compareProposals_days {
  _7d
  _30d
  _90d
  _180d
  _365d
}

type compareVotes_200_response {
  currentVotes: Float!
  oldVotes: Float!
  changeRate: Float!
}

enum queryInput_compareVotes_days {
  _7d
  _30d
  _90d
  _180d
  _365d
}

type compareAverageTurnout_200_response {
  currentAverageTurnout: Float!
  oldAverageTurnout: Float!
  changeRate: Float!
}

enum queryInput_compareAverageTurnout_days {
  _7d
  _30d
  _90d
  _180d
  _365d
}

type proposalsActivity_200_response {
  address: String!
  totalProposals: Float!
  votedProposals: Float!
  neverVoted: Boolean!
  winRate: Float!
  yesRate: Float!
  avgTimeBeforeEnd: Float!
  proposals: [query_proposalsActivity_proposals_items]!
}

type query_proposalsActivity_proposals_items {
  proposal: query_proposalsActivity_proposals_items_proposal!
  userVote: query_proposalsActivity_proposals_items_userVote
}

type query_proposalsActivity_proposals_items_proposal {
  id: String!
  daoId: String!
  proposerAccountId: String!
  description: String
  startBlock: String!
  endBlock: String!
  timestamp: String!
  status: String!
  forVotes: String!
  againstVotes: String!
  abstainVotes: String!
}

type query_proposalsActivity_proposals_items_userVote {
  id: String!
  voterAccountId: String!
  proposalId: String!
  support: String
  votingPower: String
  reason: String
  timestamp: String!
}

"""Integers that will have a value of 0 or more."""
scalar NonNegativeInt

"""Integers that will have a value greater than 0."""
scalar PositiveInt

enum queryInput_proposalsActivity_orderBy {
  timestamp
  votingPower
  voteTiming
}

enum queryInput_proposalsActivity_orderDirection {
  asc
  desc
}

"""
Filter proposals by vote type. Can be: 'yes' (For votes), 'no' (Against votes), 'abstain' (Abstain votes), 'no-vote' (Didn't vote)
"""
enum queryInput_proposalsActivity_userVoteFilter {
  yes
  no
  abstain
  no_vote
}

type query_proposals_items {
  id: String!
  daoId: String!
  txHash: String!
  proposerAccountId: String!
  title: String
  description: String!
  startBlock: Float!
  endBlock: Float!
  timestamp: String!
  status: String!
  forVotes: String!
  againstVotes: String!
  abstainVotes: String!
  startTimestamp: String!
  endTimestamp: String!
  quorum: String!
}

enum queryInput_proposals_orderDirection {
  asc
  desc
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type proposal_200_response {
  id: String!
  daoId: String!
  txHash: String!
  proposerAccountId: String!
  title: String
  description: String!
  startBlock: Float!
  endBlock: Float!
  timestamp: String!
  status: String!
  forVotes: String!
  againstVotes: String!
  abstainVotes: String!
  startTimestamp: String!
  endTimestamp: String!
  quorum: String!
}

type query_historicalBalances_items {
  address: String!
  balance: String!
  blockNumber: Float!
  tokenAddress: String!
}

enum queryInput_historicalBalances_days {
  _7d
  _30d
  _90d
  _180d
  _365d
}

type query_historicalVotingPower_items {
  address: String!
  votingPower: String!
}

enum queryInput_historicalVotingPower_days {
  _7d
  _30d
  _90d
  _180d
  _365d
}

type transactions_200_response {
  transactions: [query_transactions_transactions_items]!
}

type query_transactions_transactions_items {
  transactionHash: String!
  from: String
  to: String
  isCex: Boolean!
  isDex: Boolean!
  isLending: Boolean!
  isTotal: Boolean!
  timestamp: String!
  transfers: [query_transactions_transactions_items_transfers_items]!
  delegations: [query_transactions_transactions_items_delegations_items]!
}

type query_transactions_transactions_items_transfers_items {
  transactionHash: String!
  daoId: String!
  tokenId: String!
  amount: String!
  fromAccountId: String!
  toAccountId: String!
  timestamp: String!
  logIndex: Float!
  isCex: Boolean!
  isDex: Boolean!
  isLending: Boolean!
  isTotal: Boolean!
}

type query_transactions_transactions_items_delegations_items {
  transactionHash: String!
  daoId: String!
  delegateAccountId: String!
  delegatorAccountId: String!
  delegatedValue: String!
  previousDelegate: String
  timestamp: String!
  logIndex: Float!
  isCex: Boolean!
  isDex: Boolean!
  isLending: Boolean!
  isTotal: Boolean!
}

enum timestamp_const {
  timestamp
}

enum queryInput_transactions_sortOrder {
  asc
  desc
}

scalar queryInput_transactions_minAmount

scalar queryInput_transactions_maxAmount

type lastUpdate_200_response {
  lastUpdate: String!
}

enum queryInput_lastUpdate_chart {
  cost_comparison
  attack_profitability
  token_distribution
}

scalar ObjMap

enum HTTPMethod {
  GET
  HEAD
  POST
  PUT
  DELETE
  CONNECT
  OPTIONS
  TRACE
  PATCH
}